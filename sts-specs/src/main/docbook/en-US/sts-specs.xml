<?xml version="1.0" encoding="UTF-8"?>
<article version="5.0"
	xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd"
	xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

	<title>eID Security Token Service Specifications</title>
	<subtitle>
		Version &project.version;
		<mediaobject>
			<imageobject>
				<imagedata format="PNG" fileref="e-contract-logoFINAL.svg"
					scale="50" />
			</imageobject>
		</mediaobject>
	</subtitle>

	<info>
		<authorgroup>
			<author>
				<personname>
					<firstname>Frank</firstname>
					<surname>Cornelis</surname>
				</personname>
			</author>
		</authorgroup>
		<copyright>
			<year>2014-2019</year>
			<holder>e-Contract.be BVBA</holder>
		</copyright>
		<pubdate>
			&project.pubdate;
		</pubdate>
		<abstract>
			<para>
				This document details on the eID Security Token Service
				specifications.
			</para>
		</abstract>
	</info>

	<section>
		<title>Introduction</title>
		<para>
			eID authentication in a web context can be easily achieved
			using
			for example the eID Identity Provider. Different protocols can be
			used
			for web based authentication: SAML 2.0 Browser POST profile,
			WS-Federation web passive profile, OpenID 2.0, OAuth 2.0 or OpenID
			Connect.
			When a relying party (a web application) authenticates an
			end-user, based on the eID, it can trust the received claims.
		</para>
		<para>
			In the context of native (desktop/fat-client) applications
			however,
			achieving a trust relationship towards a remote relying
			party can be a
			challenge. In this document we define the
			specifications for an
			Identity Provider Security Token Service
			(IP-STS) that accepts eID as
			primary credential. This eID IP-STS is based on open standards like
			<xref linkend="ws-trust" />
			.
			The most important features of the eID IP-STS are:
			<itemizedlist>
				<listitem>
					<para>
						The eID IP-STS is based on open standards.
					</para>
				</listitem>
				<listitem>
					<para>
						The eID IP-STS offers a secure challenge-response
						authentication
						based on the eID card.
					</para>
				</listitem>
				<listitem>
					<para>
						The eID IP-STS can be used with different out-of-the-box STS
						clients like Windows Identity Foundations or Apache CXF STS
						Client.
					</para>
				</listitem>
				<listitem>
					<para>
						The eID IP-STS also supports 'lightweight' profiles for clients
						that have difficulties constructing a
						<xref linkend="ws-sec" />
						based signature.
					</para>
				</listitem>
				<listitem>
					<para>
						The usage of symmetric proof-of-possession keys can be made
						either mandatory or optional.
					</para>
				</listitem>
				<listitem>
					<para>
						The eID IP-STS provides a mechanism to allow remote relying
						parties to trust the authenticated user.
					</para>
				</listitem>
			</itemizedlist>
		</para>
		<section>
			<title>Namespaces</title>
			<para>
				The XML namespaces used in the following sections are described in
				<xref linkend="table-namespaces" />
				.
			</para>
			<table id="table-namespaces">
				<title>XML Namespaces</title>
				<tgroup cols="2">
					<colspec colwidth="1*" />
					<colspec colwidth="5*" />
					<thead>
						<row>
							<entry>Prefix</entry>
							<entry>Namespace</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry>
								<code>ds</code>
							</entry>
							<entry>
								<code>http://www.w3.org/2000/09/xmldsig#</code>
							</entry>
						</row>
						<row>
							<entry>
								<code>soap</code>
							</entry>
							<entry>
								<code>http://www.w3.org/2003/05/soap-envelope</code>
							</entry>
						</row>
						<row>
							<entry>
								<code>wsa</code>
							</entry>
							<entry>
								<code>
									http://www.w3.org/2005/08/addressing
								</code>
							</entry>
						</row>
						<row>
							<entry>
								<code>wsse</code>
							</entry>
							<entry>
								<code>
									http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd
								</code>
							</entry>
						</row>
						<row>
							<entry>
								<code>wsu</code>
							</entry>
							<entry>
								<code>
									http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd
								</code>
							</entry>
						</row>
						<row>
							<entry>
								<code>wst</code>
							</entry>
							<entry>
								<code>
									http://docs.oasis-open.org/ws-sx/ws-trust/200512
								</code>
							</entry>
						</row>
						<row>
							<entry>
								<code>wsp</code>
							</entry>
							<entry>
								<code>
									http://schemas.xmlsoap.org/ws/2004/09/policy
								</code>
							</entry>
						</row>
						<row>
							<entry>
								<code>ec</code>
							</entry>
							<entry>
								<code>http://www.w3.org/2001/10/xml-exc-c14n#</code>
							</entry>
						</row>
						<row>
							<entry>
								<code>wsc</code>
							</entry>
							<entry>
								<code>
									http://docs.oasis-open.org/ws-sx/ws-secureconversation/200512
								</code>
							</entry>
						</row>
						<row>
							<entry>
								<code>saml2</code>
							</entry>
							<entry>
								<code>
									urn:oasis:names:tc:SAML:2.0:assertion
								</code>
							</entry>
						</row>
						<row>
							<entry>
								<code>xsi</code>
							</entry>
							<entry>
								<code>http://www.w3.org/2001/XMLSchema-instance</code>
							</entry>
						</row>
						<row>
							<entry>
								<code>fed</code>
							</entry>
							<entry>
								<code>http://docs.oasis-open.org/wsfed/federation/200706</code>
							</entry>
						</row>
						<row>
							<entry>
								<code>auth</code>
							</entry>
							<entry>
								<code>http://docs.oasis-open.org/wsfed/authorization/200706
								</code>
							</entry>
						</row>
						<row>
							<entry>
								<code>sp</code>
							</entry>
							<entry>
								<code>http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702
								</code>
							</entry>
						</row>
						<row>
							<entry>
								<code>wsaw</code>
							</entry>
							<entry>
								<code>http://www.w3.org/2006/05/addressing/wsdl
								</code>
							</entry>
						</row>
						<row>
							<entry>
								<code>wsam</code>
							</entry>
							<entry>
								<code>http://www.w3.org/2007/05/addressing/metadata
								</code>
							</entry>
						</row>
						<row>
							<entry>
								<code>wsx</code>
							</entry>
							<entry>
								<code>http://schemas.xmlsoap.org/ws/2004/09/mex
								</code>
							</entry>
						</row>
						<row>
							<entry>
								<code>wsid</code>
							</entry>
							<entry>
								<code>http://schemas.xmlsoap.org/ws/2005/05/identity
								</code>
							</entry>
						</row>
						<row>
							<entry>
								<code>wst14</code>
							</entry>
							<entry>
								<code>http://docs.oasis-open.org/ws-sx/ws-trust/200802
								</code>
							</entry>
						</row>
					</tbody>
				</tgroup>
			</table>
		</section>
		<section>
			<title>References</title>
			<bibliography>
				<title></title>

				<bibliomixed id="base64">
					<abbrev>Base64</abbrev>
					S. Josefsson,
					<title>The Base16, Base32, and Base64 Data Encodings
					</title>
					,
					The Internet Society, 2006
					<citetitle>
						<ulink url="http://tools.ietf.org/html/rfc4648">http://tools.ietf.org/html/rfc4648
						</ulink>
					</citetitle>
				</bibliomixed>


				<bibliomixed id="Excl-C14N">
					<abbrev>Excl-C14N</abbrev>
					J. Boyer
					et al.,
					<title>Exclusive XML Canonicalization Version 1.0
					</title>
					,
					World Wide Web
					Consortium, July 2002
					<citetitle>
						<ulink url="http://www.w3.org/TR/xml-exc-c14n/">http://www.w3.org/TR/xml-exc-c14n/
						</ulink>
					</citetitle>
				</bibliomixed>

				<bibliomixed id="RFC2616">
					<abbrev>RFC 2616</abbrev>
					R. Fielding et al.,
					<title>Hypertext Transfer Protocol - HTTP/1.1.
					</title>
					,
					<citetitle>
						<ulink url="http://www.ietf.org/rfc/rfc2616.txt">http://www.ietf.org/rfc/rfc2616.txt</ulink>
					</citetitle>
					IETF (Internet Engineering Task Force) RFC 2616, June 1999.
				</bibliomixed>

				<bibliomixed id="soap">
					<abbrev>SOAP</abbrev>
					W3C,
					<title>SOAP Version 1.2</title>
					,
					<citetitle>
						<ulink url="http://www.w3.org/TR/soap12-part1/">SOAP Version 1.2</ulink>
					</citetitle>
					W3C Recommendation 27 April 2007
				</bibliomixed>

				<bibliomixed id="TLS1.0">
					<abbrev>RFC 2246</abbrev>
					T. Dierks, C. Allen,
					<title>The TLS Protocol Version 1.0
					</title>
					,
					<citetitle>
						<ulink url="http://www.ietf.org/rfc/rfc2246.txt">http://www.ietf.org/rfc/rfc2246.txt</ulink>
					</citetitle>
					IETF (Internet Engineering Task Force) RFC 2246, January 1999.
				</bibliomixed>

				<bibliomixed id="ws-sc">
					<abbrev>WS-SecConv</abbrev>
					A. Nadalin et al.,
					<title>WS-SecureConversation 1.4
					</title>
					,
					OASIS, February 2009
					<citetitle>
						<ulink
							url="http://docs.oasis-open.org/ws-sx/ws-secureconversation/v1.4/ws-secureconversation.html">http://docs.oasis-open.org/ws-sx/ws-secureconversation/v1.4/ws-secureconversation.html
						</ulink>
					</citetitle>
				</bibliomixed>

				<bibliomixed id="ws-sec">
					<abbrev>WS-Security</abbrev>
					Kelvin Lawrence, Chris Kaler,
					<title>OASIS Web Services Security: SOAP Message Security 1.1
					</title>
					,
					OASIS, February 2006
					<citetitle>
						<ulink
							url="https://www.oasis-open.org/committees/download.php/16790/wss-v1.1-spec-os-SOAPMessageSecurity.pdf">OASIS WS-Security 1.1</ulink>
					</citetitle>
				</bibliomixed>

				<bibliomixed id="ws-sp">
					<abbrev>WS-SP</abbrev>
					Kelvin Lawrence, Chris Kaler,
					<title>OASIS WS-SecurityPolicy 1.2
					</title>
					,
					OASIS, July 2007
					<citetitle>
						<ulink
							url="http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702/ws-securitypolicy-1.2-spec-os.html">OASIS WS-SecurityPolicy 1.2</ulink>
					</citetitle>
				</bibliomixed>

				<bibliomixed id="wss-ut">
					<abbrev>WSS-UT</abbrev>
					Anthony Nadalin, Chris Kaler, Ronald Monzillo, Phillip Hallam-Baker
					<title>OASIS Web Services Security: UsernameToken Profile 1.1
					</title>
					,
					OASIS, February 2006
					<citetitle>
						<ulink
							url="https://www.oasis-open.org/committees/download.php/16782/wss-v1.1-spec-os-UsernameTokenProfile.pdf">OASIS WS-Security UsernameToken Profile 1.1</ulink>
					</citetitle>
				</bibliomixed>

				<bibliomixed id="wss-saml">
					<abbrev>WSS-SAML</abbrev>
					Anthony Nadalin, Chris Kaler, Ronald Monzillo, Phillip Hallam-Baker
					<title>OASIS Web Services Security: SAML Token Profile 1.1
					</title>
					,
					OASIS, June 2005
					<citetitle>
						<ulink
							url="http://docs.oasis-open.org/wss/v1.1/wss-v1.1-spec-pr-SAMLTokenProfile-01.html">OASIS WS-Security SAML Token Profile 1.1</ulink>
					</citetitle>
				</bibliomixed>

				<bibliomixed id="wss-x509t">
					<abbrev>WSS-X509</abbrev>
					Anthony Nadalin, Chris Kaler, Ronald Monzillo, Phillip Hallam-Baker
					<title>OASIS Web Services Security: X.509 Certificate Token Profile
						1.1
					</title>
					,
					OASIS, February 2006
					<citetitle>
						<ulink
							url="http://docs.oasis-open.org/wss/v1.1/wss-v1.1-spec-os-x509TokenProfile.pdf">OASIS WS-Security X.509 Certificate Token Profile 1.1</ulink>
					</citetitle>
				</bibliomixed>

				<bibliomixed id="ws-trust">
					<abbrev>WS-Trust</abbrev>
					A. Nadalin et al.,
					<title>WS-Trust 1.3
					</title>
					,
					OASIS, March 2007
					<citetitle>
						<ulink
							url="http://docs.oasis-open.org/ws-sx/ws-trust/200512/ws-trust-1.3-os.html">http://docs.oasis-open.org/ws-sx/ws-trust/200512/ws-trust-1.3-os.html
						</ulink>
					</citetitle>
				</bibliomixed>

				<bibliomixed id="ws-trust-14">
					<abbrev>WS-Trust14</abbrev>
					A. Nadalin et al.,
					<title>WS-Trust 1.4
					</title>
					,
					OASIS, 25 April 2012
					<citetitle>
						<ulink
							url="http://docs.oasis-open.org/ws-sx/ws-trust/v1.4/ws-trust.html">http://docs.oasis-open.org/ws-sx/ws-trust/v1.4/ws-trust.html
						</ulink>
					</citetitle>
				</bibliomixed>

				<bibliomixed id="XHTML">
					<abbrev>XHTML</abbrev>
					<title>XHTML 1.0 The Extensible HyperText Markup Language (Second
						Edition)
					</title>
					,
					World Wide Web Consortium Recommendation, August 2002
					<citetitle>
						<ulink url="http://www.w3.org/TR/xhtml1/">http://www.w3.org/TR/xhtml1/
						</ulink>
					</citetitle>
				</bibliomixed>

				<bibliomixed id="xmldsig">
					<abbrev>XMLSig</abbrev>
					D. Eastlake et al.,
					<title>XML-Signature Syntax and Processing</title>
					,
					W3C Recommendation, June 2008
					<citetitle>
						<ulink url="http://www.w3.org/TR/xmldsig-core/">http://www.w3.org/TR/xmldsig-core/</ulink>
					</citetitle>
				</bibliomixed>

				<bibliomixed id="xmlns">
					<abbrev>XML-ns</abbrev>
					T. Bray, D. Hollander, A. Layman,
					<title>Namespaces in XML</title>
					,
					W3C Recommendation, January 1999
					<citetitle>
						<ulink url="http://www.w3.org/TR/1999/REC-xml-names-19990114">http://www.w3.org/TR/1999/REC-xml-names-19990114
						</ulink>
					</citetitle>
				</bibliomixed>

				<bibliomixed id="bsp">
					<abbrev>WSI-BSP</abbrev>
					Michael McIntosh, Martin Gudgin, K. Scott Morrison, Abbie Barbir,
					<title>Basic Security Profile Version 1.1</title>
					,
					The Web Services-Interoperability Organization (WS-I), January
					2010
					<citetitle>
						<ulink
							url="http://www.ws-i.org/profiles/basicsecurityprofile-1.1.html">http://www.ws-i.org/profiles/basicsecurityprofile-1.1.html
						</ulink>
					</citetitle>
				</bibliomixed>

				<bibliomixed id="ws-mex">
					<abbrev>WS-MEX</abbrev>
					Doug Davis, Ashok Malhotra, Katy Warr, Wu Chou,
					<title>Web Services Metadata Exchange (WS-MetadataExchange)
					</title>
					,
					W3C Recommendation 13 December 2011
					<citetitle>
						<ulink url="http://www.w3.org/TR/ws-metadata-exchange/">http://www.w3.org/TR/ws-metadata-exchange/
						</ulink>
					</citetitle>
				</bibliomixed>

			</bibliography>
		</section>
	</section>

	<section id="sts-x509">
		<title>X.509 Certificate Token Profile</title>
		<para>
			The first authentication construct is based on the OASIS WS-Security
			X.509 Certificate Profile version 1.1
			<xref linkend="wss-x509t" />
			.
		</para>
		<section id="sts-x509-request">
			<title>Request</title>
			<para>
				The WS-Trust request SOAP message from the native client
				towards
				the
				eID
				IP-STS looks as follows.
			</para>
			<programlisting language="xml"><![CDATA[<soap:Envelope>
  <soap:Header>
    <wsa:Action soap:mustUnderstand="1">
      http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue
    </wsa:Action>
    <wsa:MessageID>urn:uuid:...</wsa:MessageID>
    <wsa:ReplyTo>
      <wsa:Address>http://www.w3.org/2005/08/addressing/anonymous</wsa:Address>
    </wsa:ReplyTo>
    <wsa:To s:mustUnderstand="1" u:Id="to">https://...</wsa:To>
    <wsse:Security soap:mustUnderstand="1">
      <wsu:Timestamp wsu:Id="timestamp">
        <wsu:Created>2012-01-17T09:31:27.700Z</wsu:Created>
        <wsu:Expires>2012-01-17T09:36:27.700Z</wsu:Expires>
      </wsu:Timestamp>
      <wsse:BinarySecurityToken wsu:Id="uuid-bst"
        ValueType="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3"
        EncodingType="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary">
        ...
      </wsse:BinarySecurityToken>
      <ds:Signature>
        <ds:SignedInfo>
          <ds:CanonicalizationMethod
            Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
          <ds:SignatureMethod
            Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
          <ds:Reference URI="#timestamp">
            <ds:Transforms>
              <ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
            </ds:Transforms>
            <ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
            <ds:DigestValue>...</ds:DigestValue>
          </ds:Reference>
          <ds:Reference URI="#to">
            <ds:Transforms>
              <ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
            </ds:Transforms>
            <ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
            <ds:DigestValue>...</DigestValue>
          </ds:Reference>
        </ds:SignedInfo>
        <ds:SignatureValue>...</ds:SignatureValue>
        <ds:KeyInfo>
          <wsse:SecurityTokenReference>
            <wsse:Reference URI="#uuid-bst"/>
          </wsse:SecurityTokenReference>
        </ds:KeyInfo>
      </ds:Signature>
    </wsse:Security>
  </soap:Header>
  <soap:Body>
    <wst:RequestSecurityToken>
      <wst:RequestType>
        http://docs.oasis-open.org/ws-sx/ws-trust/200512/Issue
      </wst:RequestType>
      <wst:KeyType>
        http://docs.oasis-open.org/ws-sx/ws-trust/200512/Bearer
      </wst:KeyType>
      <wst:TokenType>
      	http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0
      <wst:TokenType>
      <wsp:AppliesTo>
        <wsa:EndpointReference>
          <wsa:Address>urn:some-target-application</wsa:Address>
        </wsa:EndpointReference>
      </wsp:AppliesTo>
    </wst:RequestSecurityToken>
  </soap:Body>
</soap:Envelope>]]></programlisting>
			<para>
				The client sends this request towards the eID IP-STS over SSL (
				<xref linkend="TLS1.0" />
				).
				This allows the client to authenticate the eID IP-STS and gives us
				confidentiality and integrity.
			</para>
			<para>
				The WS-Security XML signature SHOULD at least digest the
				<code>&lt;wsa:To&gt;</code>
				element
				and the
				<code>&lt;wsu:Timestamp&gt;</code>
				element
				to achieve the required security properties for an entity
				authentication.
				The signing of the
				<code>&lt;wsa:To&gt;</code>
				element prevents reuse of the XML signature within another context
				(MITM attack).
				The value of the
				<code>&lt;wsa:To&gt;</code>
				element SHOULD correspond with the address of the eID IP-STS
				instance
				used by the client application.
				The signing of the
				<code>&lt;wsu:Timestamp&gt;</code>
				element serves as proof of message freshness towards the eID IP-STS
				as premisse for the entity authentication.
			</para>
			<para>
				Ideally
				<code>&lt;wsse:BinarySecurityToken&gt;</code>
				would be using
				<code>#X509PKIPathv1</code>
				for
				<code>wsse:BinarySecurityToken/@ValueType</code>
				as the eID IP-STS needs the complete X509 certificate chain to be
				able to
				perform a
				PKI validation.
				However, as Windows Communication
				Foundation only supports
				<code>#X509v3</code>
				the eID IP-STS must be able to contruct the certificate chain
				itself.
			</para>
			<para>
				Note that an eID IP-STS
				implementation can also accept other
				non-eID X509
				certificates.
			</para>
			<para>
				To ensure interoperability with Windows Communication
				Foundation, the
				eID IP-STS should not require compliance with WS-I
				Basic Security
				Profile Version 1.1 (
				<xref linkend="bsp" />
				).
			</para>
			<para>
				To ensure interoperability with Apache CXF, the eID IP-STS SHOULD
				also support the usage of the
				<code>&lt;wst:SecondaryParameters&gt;</code>
				element.
			</para>
			<para>
				The
				<code>&lt;wst:KeyType&gt;</code>
				element indicates which type of proof of possession key should be
				returned by the eID IP-STS. In this case, the client SHOULD require
				a
				bearer token that does not provide any proof of possession.
			</para>
			<para>
				The
				<code>&lt;wst:TokenType&gt;</code>
				element indicates the type of the token that should be returned by
				the eID IP-STS. In this case a SAML 2.0 assertion bearer token will
				be returned.
			</para>
			<para>
				The
				<code>&lt;wsp:AppliesTo&gt;</code>
				elements allows the eID IP-STS to determine which claims it can
				release within the response SAML assertion.
			</para>
		</section>
		<section id="sts-x509-processing">
			<title>Processing</title>
			<para>
				The eID IP-STS performs the following processing:
				<itemizedlist>
					<listitem>
						<para>
							The XML signature SHOULD be verified using the
							<code>&lt;wsse:BinarySecurityToken&gt;</code>
							end-entity certificate.
						</para>
					</listitem>
					<listitem>
						<para>
							The
							<code>&lt;wsse:BinarySecurityToken&gt;</code>
							X509 certificate chain should be validated using common PKI
							validation rules (OCSP, CRL).
						</para>
					</listitem>
					<listitem>
						<para>
							The XML signature SHOULD at least sign the
							<code>&lt;wsa:To&gt;</code>
							element
							and the
							<code>&lt;wsu:Timestamp&gt;</code>
							element.
						</para>
					</listitem>
					<listitem>
						<para>
							The
							<code>&lt;wsu:Timestamp&gt;</code>
							element SHOULD contain a valid time mark.
						</para>
					</listitem>
					<listitem>
						<para>
							The content of the
							<code>&lt;wsa:To&gt;</code>
							element
							SHOULD correspond with the eID IP-STS endpoint address.
						</para>
					</listitem>
					<listitem>
						<para>
							The
							<code>&lt;wsp:AppliesTo&gt;</code>
							SHOULD indicate a known application.
						</para>
					</listitem>
				</itemizedlist>
			</para>
		</section>
		<section>
			<title>Response</title>
			<para>
				After a successful validation of the request message the eID
				IP-STS responds as follows.
			</para>
			<programlisting language="xml"><![CDATA[<soap:Envelope>
  <soap:Header>
    <wsa:Action soap:mustUnderstand="1">
      http://docs.oasis-open.org/ws-sx/ws-trust/200512/RSTRC/IssueFinal
    </wsa:Action>
    <wsa:RelatesTo>urn:uuid:...</wsa:RelatesTo>
    <wsse:Security soap:mustUnderstand="1">
      <wsu:Timestamp wsu:Id="timestamp">
        <wsu:Created>2012-01-17T09:31:27.700Z</wsu:Created>
        <wsu:Expires>2012-01-17T09:36:27.700Z</wsu:Expires>
      </wsu:Timestamp>
    </wsse:Security>
  </soap:Header>
  <soap:Body>
    <wst:RequestSecurityTokenResponseCollection>
      <wst:RequestSecurityTokenResponse>
        <wst:Lifetime>
          <wsu:Created>2012-01-17T09:31:29.143Z</wsu:Created>
          <wsu:Expires>2012-01-17T10:31:29.143Z</wsu:Expires>
        </trust:Lifetime>
        <wsp:AppliesTo>
          <wsa:EndpointReference>
            <wsa:Address>urn:some-target-application</a:Address>
          </wsa:EndpointReference>
        </wsp:AppliesTo>
        <wst:RequestedSecurityToken>
          <saml2:Assertion ID="assertionId"
            IssueInstant="2011-05-09T09:36:37.359Z" Version="2.0">
            <saml2:Issuer>https://...</saml2:Issuer>
            <saml2:Subject>
              <saml2:NameID
                Format="urn:oasis:names:tc:SAML:1.1:nameid-format:transient">
                71715100070
              </saml2:NameID>
              <saml2:SubjectConfirmation
                Method="urn:oasis:names:tc:SAML:2.0:cm:bearer"/>
            </saml2:Subject>
            <saml2:Conditions NotBefore="2011-05-09T08:36:37.359Z"
              NotOnOrAfter="2011-05-09T10:36:37.359Z">
              <saml2:AudienceRestriction>
                <saml2:Audience>
                  urn:some-target-application
                </saml2:Audience>
			  </saml2:AudienceRestriction>
            </saml2:Conditions>
            <saml2:AuthnStatement AuthnInstant="2011-05-09T09:36:37.515Z">
              <saml2:AuthnContext>
                <saml2:AuthnContextClassRef>
                  urn:oasis:names:tc:SAML:2.0:ac:classes:SmartcardPKI
                </saml2:AuthnContextClassRef>
              </saml2:AuthnContext>
            </saml2:AuthnStatement>
            <ds:Signature>
              <ds:SignedInfo>
                <ds:CanonicalizationMethod
                  Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
                <ds:SignatureMethod
                  Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
                <ds:Reference URI="#assertion">
                  <ds:Transforms>
                    <ds:Transform
                      Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
                    <ds:Transform
                      Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
                  </ds:Transforms>
                  <ds:DigestMethod
                    Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
                  <ds:DigestValue>...</ds:DigestValue>
                </ds:Reference>
              </ds:SignedInfo>
              <ds:SignatureValue>...</ds:SignatureValue>
              <ds:KeyInfo>
                <ds:X509Data>
                  <ds:X509Certificate>...</ds:X509Certificate>
                </ds:X509Data>
              </ds:KeyInfo>
            </ds:Signature>
          </saml2:Assertion>
        </wst:RequestedSecurityToken>
        <wst:RequestedAttachedReference>
          <wsse:SecurityTokenReference 
            wsse:TokenType="http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0">
            <wsse:KeyIdentifier
              ValueType="http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLID">
              assertionId
            </wsse:KeyIdentifier>
          </wsse:SecurityTokenReference>
        </wst:RequestedAttachedReference>
        <wst:TokenType>
          http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0
        </wst:TokenType>
        <wst:RequestType>
          http://docs.oasis-open.org/ws-sx/ws-trust/200512/Issue
        </wst:RequestType>
        <wst:KeyType>
          http://docs.oasis-open.org/ws-sx/ws-trust/200512/Bearer
        </wst:KeyType>
      </wst:RequestSecurityTokenResponse>
    </wst:RequestSecurityTokenResponseCollection>
  </soap:Body>
</soap:Envelope>]]></programlisting>
			<para>
				The value of the
				<code>&lt;wsa:RelatesTo&gt;</code>
				element corresponds with the value of
				the
				<code>&lt;wsa:MessageID&gt;</code>
				element within the request message.
			</para>
			<para>
				Both the
				<code>&lt;wsu:Timestamp&gt;</code>
				and the
				<code>&lt;wst:Lifetime&gt;</code>
				serve as proof of the message freshness towards the client.
			</para>
			<para>
				The
				<code>&lt;wst:RequestedSecurityToken&gt;</code>
				element contains the
				<code>&lt;saml2:Assertion&gt;</code>
				SAML 2.0 bearer token.
				The SAML 2.0 assertion has been signed using
				the eID IP-STS signing certificate. This XML signature MAY be
				verified by the requesting client before consuming the
				<code>&lt;saml2:NameID&gt;</code>
				element
				within the SAML 2.0 assertion.
				The XML signature SHOULD be
				verified by
				alien relying parties when the SAML 2.0 assertion is used
				as a bearer
				token towards WS-Security secured SOAP web services.
			</para>
		</section>
		<section>
			<title>Security Policy</title>
			<para>
				To easy integration with existing STS clients, eID IP-STS
				implementations should use the following
				WS-SecurityPolicy
				<xref linkend="ws-sp" />
				configuration.
			</para>
			<programlisting language="xml"><![CDATA[<wsp:Policy wsu:Id="SecurityTokenServicePolicy">
  <wsp:ExactlyOne>
    <wsp:All>
      <sp:TransportBinding>
        <wsp:Policy>
          <sp:TransportToken>
            <wsp:Policy>
              <sp:HttpsToken />
            </wsp:Policy>
          </sp:TransportToken>
          <sp:AlgorithmSuite>
            <wsp:Policy>
              <sp:Basic128 />
            </wsp:Policy>
          </sp:AlgorithmSuite>
          <sp:IncludeTimestamp />
        </wsp:Policy>
      </sp:TransportBinding>
      <sp:EndorsingSupportingTokens>
        <wsp:Policy>
          <sp:X509Token
  sp:IncludeToken="http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702/IncludeToken/AlwaysToRecipient">
            <wsp:Policy>
              <sp:WssX509V3Token11 />
            </wsp:Policy>
          </sp:X509Token>
          <sp:SignedParts>
            <sp:Header Name="To"
              Namespace="http://www.w3.org/2005/08/addressing" />
          </sp:SignedParts>
        </wsp:Policy>
      </sp:EndorsingSupportingTokens>
      <wsaw:UsingAddressing />
    </wsp:All>
  </wsp:ExactlyOne>
</wsp:Policy>]]></programlisting>
			<para>
				To improve interoperability, eID IP-STS implementations should
				support WS-MetadataExchange
				<xref linkend="ws-mex" />
				via the
				<code>/mex</code>
				suffix.
			</para>
		</section>
	</section>

	<section id="section-saml-token">
		<title>
			SAML Token Profile
		</title>
		<para>
			A client can used the SAML 2.0 bearer token to secure the
			communication towards relying parties.
			A SOAP request message can
			embed the SAML 2.0 bearer token according to OASIS WS-Security SAML
			Token Profile 1.1.1
			<xref linkend="wss-saml" />
			. The following SOAP request message demonstrates the usage of such a
			SAML 2.0 bearer token.
		</para>
		<programlisting language="xml"><![CDATA[<soap:Envelope>
  <soap:Header>
    <wsse:Security soap:mustUnderstand="1">
      <wsu:Timestamp wsu:Id="timestamp">
        <wsu:Created>2012-01-17T09:31:27.700Z</wsu:Created>
        <wsu:Expires>2012-01-17T09:36:27.700Z</wsu:Expires>
      </wsu:Timestamp>
      <saml2:Assertion ID="assertion"
            IssueInstant="2011-05-09T09:36:37.359Z" Version="2.0">
        ...
      </saml2:Assertion>
    </wsse:Security>
  </soap:Header>
  <soap:Body>
    ...
  </soap:Body>
</soap:Envelope>]]></programlisting>
		<para>
			A relying party web service supporting WS-SecurityPolicy
			<xref linkend="ws-sp" />
			could use the following security policy.
		</para>
		<programlisting language="xml"><![CDATA[<wsp:Policy wsu:Id="ExampleSamlSecurityPolicy">
  <wsp:ExactlyOne>
    <wsp:All>
      <sp:TransportBinding>
        <wsp:Policy>
          <sp:TransportToken>
            <wsp:Policy>
              <sp:HttpsToken />
            </wsp:Policy>
          </sp:TransportToken>
          <sp:AlgorithmSuite>
            <wsp:Policy>
              <sp:Basic128 />
            </wsp:Policy>
          </sp:AlgorithmSuite>
          <sp:IncludeTimestamp />
        </wsp:Policy>
      </sp:TransportBinding>
      <sp:SignedSupportingTokens>
        <wsp:Policy>
          <sp:SamlToken>
            <wsp:Policy>
              <sp:WssSamlV20Token11 />
            </wsp:Policy>
          </sp:SamlToken>
        </wsp:Policy>
      </sp:SignedSupportingTokens>
      <sp:Wss11>
        <wsp:Policy>
          <sp:MustSupportRefEmbeddedToken />
        </wsp:Policy>
      </sp:Wss11>
    </wsp:All>
  </wsp:ExactlyOne>
</wsp:Policy>]]></programlisting>
		<para>
			A relying party web service could even refer directly to the eID
			IP-STS within the security policy as shown below.
		</para>
		<programlisting language="xml"><![CDATA[<wsp:Policy wsu:Id="ExampleSamlSecurityPolicy">
  <wsp:ExactlyOne>
    <wsp:All>
      <sp:TransportBinding>
        <wsp:Policy>
          <sp:TransportToken>
            <wsp:Policy>
              <sp:HttpsToken />
            </wsp:Policy>
          </sp:TransportToken>
          <sp:AlgorithmSuite>
            <wsp:Policy>
              <sp:Basic128 />
            </wsp:Policy>
          </sp:AlgorithmSuite>
          <sp:IncludeTimestamp />
        </wsp:Policy>
      </sp:TransportBinding>
      <sp:SignedSupportingTokens>
        <wsp:Policy>
          <sp:IssuedToken
            sp:IncludeToken="http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702/IncludeToken/AlwaysToRecipient">
            <sp:RequestSecurityTokenTemplate>
              <wst:TokenType>
                http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0
              </wst:TokenType>
              <wst:KeyType>
                http://docs.oasis-open.org/ws-sx/ws-trust/200512/Bearer
              </wst:KeyType>
            </sp:RequestSecurityTokenTemplate>
            <wsp:Policy>
              <sp:RequireInternalReference />
            </wsp:Policy>
            <sp:Issuer>
              <wsa:Address>
                http://www.w3.org/2005/08/addressing/anonymous
              </wsa:Address>
              <wsa:Metadata>
                <wsx:Metadata>
                  <wsx:MetadataSection>
                    <wsx:MetadataReference>
                      <wsa:Address>
                        https://www.e-contract.be/iam/sts/mex
                      </wsa:Address>
                    </wsx:MetadataReference>
                  </wsx:MetadataSection>
                </wsx:Metadata>
              </wsa:Metadata>
            </sp:Issuer>
          </sp:IssuedToken>
        </wsp:Policy>
      </sp:SignedSupportingTokens>
      <wsam:Addressing wsp:Optional="false">
        <wsp:Policy />
      </wsam:Addressing>
    </wsp:All>
  </wsp:ExactlyOne>
</wsp:Policy>]]></programlisting>
		<para>
			The above security policy uses the WS-MetadataExchange feature
			of the eID IP-STS to allow for easy configuration of STS clients.
		</para>
	</section>

	<section id="section-validate-saml">
		<title>Validating SAML assertions</title>
		<para>
			When a relying party receives a SAML 2.0 assertion as bearer
			token it
			SHOULD validate the SAML assertion before proceeding.
			The relying
			party should at least verify the following conditions:
			<itemizedlist>
				<listitem>
					<para>
						Validate the XML signature on the SAML assertion.
						The XML signature
						should contain a
						<code>&lt;ds:Reference&gt;</code>
						referring to the top-level
						<code>&lt;saml2:Assertion&gt;</code>
						element.
					</para>
				</listitem>
				<listitem>
					<para>
						The relying party SHOULD verify whether the value of the
						<code>&lt;saml2:Issuer&gt;</code>
						element corresponds with the trusted eID IP-STS instance.
					</para>
				</listitem>
				<listitem>
					<para>
						The relying party SHOULD verify whether the SAML signatory
						corresponds with the trusted eID IP-STS instance.
					</para>
				</listitem>
				<listitem>
					<para>
						The relying party SHOULD verify the freshness of the SAML 2.0
						assertion
						via the
						<code>NotBefore</code>
						and
						<code>NotAfter</code>
						attributes
						of the
						<code>&lt;saml2:Conditions&gt;</code>
						element.
					</para>
				</listitem>
				<listitem>
					<para>
						The relying party SHOULD verify that the SAML 2.0 assertion is
						indeed intended
						for him via the
						<code>&lt;saml2:Audience&gt;</code>
						element.
					</para>
				</listitem>
			</itemizedlist>
		</para>
		<para>
			A relying party can setup the trust relationship towards the eID
			IP-STS instance in different ways.
			The relying party could for example
			keep reference of the SHA1 fingerprint of the trusted eID IP-STS
			signing certificate. The relying party could also keep reference of
			the X509 certificate of the trusted eID IP-STS instance.
		</para>
		<para>
			To aid the
			relying party in the bootstrapping of the trust
			relationship towards
			the eID IP-STS, an eID IP-STS instance should
			expose an OASIS SAML
			2.0 metadata document. This SAML 2.0 metadata
			document SHOULD at
			least contain the following elements.
		</para>
		<programlisting language="xml"><![CDATA[<md:EntityDescriptor entityID="https://...">
  <md:RoleDescriptor xsi:type="fed:SecurityTokenServiceType"
    protocolSupportEnumeration="http://docs.oasis-open.org/wsfed/federation/200706">
    <md:KeyDescriptor use="signing">
      <ds:KeyInfo>
        <ds:X509Data>
          <ds:X509Certificate>...</ds:X509Certificate>
        </ds:X509Data>
      </ds:KeyInfo>
    </md:KeyDescriptor>
    <fed:TokenTypesOffered>
      <fed:TokenType Uri="urn:oasis:names:tc:SAML:2.0" />
    </fed:TokenTypesOffered>
    <fed:SecurityTokenServiceEndpoint>
      <wsa:EndpointReference> 
        <wsa:Address>https://...</wsa:Address> 
      </wsa:EndpointReference>
    </fed:SecurityTokenServiceEndpoint>
  </md:RoleDescriptor>
</md:EntityDescriptor>]]></programlisting>
		<para>
			A relying party SHOULD retrieve this SAML 2.0 metadata document
			over
			SSL. The eID IP-STS signing certificate is located within the
			<code>&lt;md:KeyDescriptor&gt;</code>
			element.
		</para>
	</section>

	<section>
		<title>STS based Validation</title>
		<para>
			While a relying party can perfectly validate a received SAML
			assertion itself as described under
			<xref linkend="section-validate-saml" />
			, it might be easier for some relying parties to use the eID IP-STS
			itself to validate the SAML assertions.
		</para>
		<section>
			<title>Request</title>
			<para>
				A relying party can send the
				following STS validation request to
				the eID IP-STS.
			</para>
			<programlisting language="xml"><![CDATA[<soap:Envelope>
  <soap:Header>
  	<wsa:Action soap:mustUnderstand="1">
      http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Validate
    </wsa:Action>
    <wsa:MessageID>urn:uuid:...</wsa:MessageID>
    <wsa:ReplyTo>
      <wsa:Address>http://www.w3.org/2005/08/addressing/anonymous</wsa:Address>
    </wsa:ReplyTo>
    <wsa:To s:mustUnderstand="1" u:Id="to">https://...</wsa:To>
    <wsse:Security soap:mustUnderstand="1">
      <wsu:Timestamp wsu:Id="timestamp">
        <wsu:Created>2012-01-17T09:31:27.700Z</wsu:Created>
        <wsu:Expires>2012-01-17T09:36:27.700Z</wsu:Expires>
      </wsu:Timestamp>
    </wsse:Security>
  </soap:Header>
  <soap:Body>
    <wst:RequestSecurityToken>
      <wst:RequestType>
        http://docs.oasis-open.org/ws-sx/ws-trust/200512/Validate
      </wst:RequestType>
      <wst:TokenType>
        http://docs.oasis-open.org/ws-sx/ws-trust/200512/RSTR/Status
      </wst:TokenType>
      <wst:ValidateTarget>
        <saml2:Assertion ID="assertionId"
          IssueInstant="2012-02-09T09:27:17.433Z" Version="2.0">
          ...
        </saml2:Assertion>
      </wst:ValidateTarget>
      <wsp:AppliesTo>
        <wsa:EndpointReference>
          <wsa:Address>urn:some-target-application</wsa:Address>
        </wsa:EndpointReference>
      </wsp:AppliesTo>
    </wst:RequestSecurityToken>
  </soap:Body>
</soap:Envelope>]]></programlisting>
			<para>
				The relying party should send the request over SSL towards the
				trusted eID IP-STS instance.
			</para>
			<para>
				Via the
				<code>&lt;wsp:AppliesTo&gt;</code>
				element the relying party can restrict
				the application context in
				which the SAML assertion should be
				validated. Since according to the
				WS-Trust specification
				<xref linkend="ws-trust" />
				the
				<code>&lt;wsp:AppliesTo&gt;</code>
				element is not mandatory, eID IP-STS implementations should also
				consider this element
				as optional. This to prevent that vanilla STS
				clients cannot invoke the validation operation on the STS.
			</para>
		</section>
		<section>
			<title>Processing</title>
			<para>
				The eID IP-STS SHOULD at least perform the following processing:
				<itemizedlist>
					<listitem>
						<para>
							The
							<code>&lt;wsu:Timestamp&gt;</code>
							element SHOULD contain a valid time mark.
						</para>
					</listitem>
					<listitem>
						<para>
							The content of the
							<code>&lt;wsa:To&gt;</code>
							element
							SHOULD correspond with the eID IP-STS endpoint address.
						</para>
					</listitem>
					<listitem>
						<para>
							Validate the XML signature on the SAML assertion.
							The XML
							signature
							should contain a
							<code>&lt;ds:Reference&gt;</code>
							referring to the top-level
							<code>&lt;saml2:Assertion&gt;</code>
							element.
						</para>
					</listitem>
					<listitem>
						<para>
							The eID IP-STS SHOULD verify whether the value of the
							<code>&lt;saml2:Issuer&gt;</code>
							element equals its own name.
						</para>
					</listitem>
					<listitem>
						<para>
							The eID IP-STS SHOULD verify that he is the SAML signatory.
						</para>
					</listitem>
					<listitem>
						<para>
							The eID IP-STS SHOULD verify the freshness of the SAML 2.0
							assertion
							via the
							<code>NotBefore</code>
							and
							<code>NotAfter</code>
							attributes
							of the
							<code>&lt;saml2:Conditions&gt;</code>
							element.
						</para>
					</listitem>
					<listitem>
						<para>
							The eID IP-STS SHOULD verify that the SAML 2.0 assertion
							<code>&lt;saml2:Audience&gt;</code>
							element value corresponds with the
							<code>&lt;wsp:AppliesTo&gt;</code>
							element value from the request. This only if the
							<code>&lt;wsp:AppliesTo&gt;</code>
							element has been provided.
						</para>
					</listitem>
				</itemizedlist>
			</para>
		</section>
		<section>
			<title>Response</title>
			<para>
				Upon successful processing, the eID IP-STS responds with:
			</para>
			<programlisting language="xml"><![CDATA[<soap:Envelope>
  <soap:Header>
  	<wsa:Action soap:mustUnderstand="1">
      http://docs.oasis-open.org/ws-sx/ws-trust/200512/RSTR/ValidateFinal
    </wsa:Action>
    <wsa:RelatesTo>urn:uuid:...</wsa:RelatesTo>
    <wsse:Security soap:mustUnderstand="1">
      <wsu:Timestamp>
        <wsu:Created>2012-02-09T09:27:19.197Z</wsu:Created>
        <wsu:Expires>2012-02-09T09:32:19.197Z</wsu:Expires>
      </wsu:Timestamp>
    </wsse:Security>
  </soap:Header>
  <soap:Body>
    <wst:RequestSecurityTokenResponse>
      <wst:TokenType>
        http://docs.oasis-open.org/ws-sx/ws-trust/200512/RSTR/Status
      </wst:TokenType>
      <wst:Status>
        <wst:Code>
          http://docs.oasis-open.org/ws-sx/ws-trust/200512/status/valid
        </wst:Code>
        <wst:Reason>
          The Trust service successfully validated the input
        </wst:Reason>
      </wst:Status>
    </wst:RequestSecurityTokenResponse>
  </soap:Body>
</soap:Envelope>]]></programlisting>
			<para>
				The relying party SHOULD at least check whether the
				<code>&lt;wst:Code&gt;</code>
				element value indeed indicates a
				<code>valid</code>
				status.
			</para>
		</section>
	</section>

	<section>
		<title>Attributes</title>
		<para>
			The active authentication as specified under
			<xref linkend="sts-x509" />
			results in a SAML 2.0 assertion that only contains a subject
			<code>&lt;saml2:NameID&gt;</code>
			as unique user identifier.
			This section describes various options to
			enrich the retrieved SAML assertion with attributes.
			Attributes can
			have different origins:
		</para>
		<itemizedlist>
			<listitem>
				<para>
					Attributes can be self claimed.
				</para>
			</listitem>
			<listitem>
				<para>
					Attributes can be derived from the eID card.
					As the eID card
					also offers different
					attributes (name, address, ...),
					relying
					parties probably also want
					to access these eID attributes.
				</para>
			</listitem>
		</itemizedlist>
		<para>
			To
			allow the eID IP-STS to issue SAML
			assertions containing
			attributes,
			the relying party needs to pass
			a specific SAML 2.0
			assertion as part
			of the
			<xref linkend="sts-x509-request" />
			.
			This specific SAML assertion should be passed as SAML 2.0 bearer
			token within the
			<code>&lt;wst14:ActAs&gt;</code>
			WS-Trust 1.4
			<xref linkend="ws-trust-14" />
			element.
			We are using
			<code>&lt;wst14:ActAs&gt;</code>
			to achieve maximum interoperability when using web service
			frameworks
			like Apache CXF or Windows Communication Foundation.
			The
			specific SAML
			assertion looks as follows.
		</para>
		<programlisting language="xml"><![CDATA[<saml2:Assertion ID="assertion-id"
  IssueInstant="2011-05-09T09:36:37.359Z" Version="2.0">
  <saml2:Issuer>self-claimed</saml2:Issuer>
  <saml2:AttributeStatement>
  	<saml2:Attribute Name="urn:be:e-contract:sts:eid:identity">
  	  <saml2:AttributeValue xsi:type="xs:base64Binary">
  	    ...
  	  </saml2:AttributeValue>
  	</saml2:Attribute>
  	<saml2:Attribute Name="urn:be:e-contract:sts:eid:identity-signature">
  	  <saml2:AttributeValue xsi:type="xs:base64Binary">
  	    ...
  	  </saml2:AttributeValue>
  	</saml2:Attribute>
  	<saml2:Attribute Name="urn:be:e-contract:iam:claims:self-claimed:software-key">
  	  <saml2:AttributeValue xsi:type="xs:string">
  	    ...
  	  </saml2:AttributeValue>
  	</saml2:Attribute>
  </saml2:AttributeStatement>
</saml2:Assertion>]]></programlisting>
		<para>
			Depending on the attributes that the eID IP-STS should return,
			other
			<code>&lt;saml2:Attribute&gt;</code>
			elements should be passed within the specific SAML 2.0 assertion.
			The
			eID IP-STS should support the following
			specific input attributes:
			<variablelist>
				<varlistentry>
					<term>
						<code>urn:be:e-contract:sts:eid:identity</code>
					</term>
					<listitem>
						<para>
							The eID identity file.
							The attribute value type should be
							<code>xs:base64Binary</code>
							.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>
						<code>urn:be:e-contract:sts:eid:identity-signature</code>
					</term>
					<listitem>
						<para>
							The eID identity file signature by the national registration
							authority. The attribute value type should be
							<code>xs:base64Binary</code>
							.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>
						<code>urn:be:e-contract:sts:eid:nr-cert</code>
					</term>
					<listitem>
						<para>
							The X509 signing certificate used by the national
							registration
							authority. The attribute value type should be
							<code>xs:base64Binary</code>
							.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>
						<code>urn:be:e-contract:sts:eid:address</code>
					</term>
					<listitem>
						<para>
							The eID address file.
							The attribute value type should be
							<code>xs:base64Binary</code>
							.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>
						<code>urn:be:e-contract:sts:eid:address-signature</code>
					</term>
					<listitem>
						<para>
							The eID address file signature by the national registration
							authority. The attribute value type should be
							<code>xs:base64Binary</code>
							.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>
						<code>urn:be:e-contract:sts:eid:photo</code>
					</term>
					<listitem>
						<para>
							The eID photo file.
							The attribute value type should be
							<code>xs:base64Binary</code>
							.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>
						<code>urn:be:e-contract:iam:claims:self-claimed:office-key</code>
					</term>
					<listitem>
						<para>
							The self claimed office key.
							The attribute value type should be
							<code>xs:string</code>
							.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>
						<code>urn:be:e-contract:iam:claims:self-claimed:software-key
						</code>
					</term>
					<listitem>
						<para>
							The self claimed software key.
							The attribute value type should be
							<code>xs:string</code>
							.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
		</para>
		<para>
			Eventually the eID IP-STS will deliver attributes as part of
			the
			SAML
			2.0 bearer token. These attributes are made available
			as
			<code>&lt;saml2:AttributeStatement&gt;</code>
			attributes within the SAML 2.0 bearer token.
			The eID IP-STS SHOULD
			support the following attributes:
			<variablelist>
				<varlistentry>
					<term>
						<code>http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name
						</code>
					</term>
					<listitem>
						<para>
							The URI for a claim that specifies the full name of an eID user.
							The
							attribute value type should be
							<code>xs:string</code>
							.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>
						<code>http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname
						</code>
					</term>
					<listitem>
						<para>
							The URI for a claim that specifies the surname of an eID user.
							The
							attribute value type should be
							<code>xs:string</code>
							.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>
						<code>http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname
						</code>
					</term>
					<listitem>
						<para>
							The URI for a claim that specifies the given name of an eID user.
							The
							attribute value type should be
							<code>xs:string</code>
							.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>
						<code>http://schemas.xmlsoap.org/ws/2005/05/identity/claims/x500distinguishedname
						</code>
					</term>
					<listitem>
						<para>
							The URI for a distinguished name claim of the eID X.509
							authentication certificate.
							The
							attribute value type should be
							<code>xs:string</code>
							.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>
						<code>http://schemas.xmlsoap.org/ws/2005/05/identity/claims/country
						</code>
					</term>
					<listitem>
						<para>
							The URI for a claim that specifies the given name of an eID user.
							For eID users this defaults to BE.
							The
							attribute value type should
							be
							<code>xs:string</code>
							.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>
						<code>http://schemas.xmlsoap.org/ws/2005/05/identity/claims/dateofbirth
						</code>
					</term>
					<listitem>
						<para>
							The URI for a claim that specifies the date of birth of an eID
							user.
							The
							attribute value type should
							be
							<code>xs:string</code>
							.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>
						<code>http://schemas.xmlsoap.org/ws/2005/05/identity/claims/gender
						</code>
					</term>
					<listitem>
						<para>
							The URI for a claim that specifies the gender an eID
							user.
							The
							attribute value type should
							be
							<code>xs:string</code>
							.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>
						<code>http://schemas.xmlsoap.org/ws/2005/05/identity/claims/locality
						</code>
					</term>
					<listitem>
						<para>
							The URI for a claim that specifies the locality in which an eID
							user resides.
							The
							attribute value type should
							be
							<code>xs:string</code>
							.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>
						<code>http://schemas.xmlsoap.org/ws/2005/05/identity/claims/postalcode
						</code>
					</term>
					<listitem>
						<para>
							The URI for a claim that specifies the postal code of an eID
							user.
							The
							attribute value type should
							be
							<code>xs:string</code>
							.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>
						<code>http://schemas.xmlsoap.org/ws/2005/05/identity/claims/privatepersonalidentifier
						</code>
					</term>
					<listitem>
						<para>
							The URI for a claim that specifies the private personal
							identifier (PPI) of the eID
							user.
							The
							attribute value type should
							be
							<code>xs:string</code>
							.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>
						<code>http://schemas.xmlsoap.org/ws/2005/05/identity/claims/streetaddress
						</code>
					</term>
					<listitem>
						<para>
							The URI for a claim that specifies the street address (street and
							house number) of the eID
							user.
							The
							attribute value type should
							be
							<code>xs:string</code>
							.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>
						<code>urn:be:e-contract:iam:claims:self-claimed:office-key
						</code>
					</term>
					<listitem>
						<para>
							The self claimed office key.
							The
							attribute value type should
							be
							<code>xs:string</code>
							.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>
						<code>urn:be:e-contract:iam:claims:self-claimed:software-key
						</code>
					</term>
					<listitem>
						<para>
							The self claimed software key.
							The
							attribute value type should
							be
							<code>xs:string</code>
							.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
		</para>
		<para>
			Depending on the eID IP-STS policy, the eID IP-STS will enrich the
			SAML 2.0 bearer token with attributes based on:
			<itemizedlist>
				<listitem>
					<para>
						The
						<code>&lt;wsp:AppliesTo&gt;</code>
						element.
					</para>
				</listitem>
				<listitem>
					<para>
						The optional
						<code>&lt;wst:Claims&gt;</code>
						element that should be part of the
						<code>&lt;wst:RequestSecurityToken&gt;</code>
						element.
					</para>
				</listitem>
			</itemizedlist>
		</para>
		<section>
			<title>Request</title>
			<para>
				A request that demonstrates the usage of eID attributes is
				given
				below. Here we omitted most elements from the
				<xref linkend="sts-x509-request" />
				message to better highlight the attribute sections.
			</para>
			<programlisting language="xml"><![CDATA[<soap:Envelope>
  <soap:Header>
    ...
    <wsse:Security soap:mustUnderstand="1">
      ...
    </wsse:Security>
  </soap:Header>
  <soap:Body>
    <wst:RequestSecurityToken>
      ...
      <wst:Claims Dialect="http://schemas.xmlsoap.org/ws/2005/05/identity">
        <wsid:ClaimType
          Uri="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname"/>
        <wsid:ClaimType
          Uri="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname"/>
      </wst:Claims>
      <wsp:AppliesTo>
        <wsa:EndpointReference>
          <wsa:Address>urn:some-target-application</wsa:Address>
        </wsa:EndpointReference>
      </wsp:AppliesTo>
      <wst14:ActAs>
        <saml2:Assertion ID="assertion-id"
          IssueInstant="2011-05-09T09:36:37.359Z" Version="2.0">
          <saml2:AttributeStatement>
            <saml2:Attribute Name="urn:be:e-contract:sts:eid:identity">
  	          <saml2:AttributeValue xsi:type="xs:base64Binary">
  	            ...
  	          </saml2:AttributeValue>
  	        </saml2:Attribute>
  	        <saml2:Attribute Name="urn:be:e-contract:sts:eid:identity-signature">
  	          <saml2:AttributeValue xsi:type="xs:base64Binary">
  	          ...
  	          </saml2:AttributeValue>
            </saml2:Attribute>
  	        <saml2:Attribute Name="urn:be:e-contract:sts:eid:nr-cert">
  	          <saml2:AttributeValue xsi:type="xs:base64Binary">
  	            ...
  	          </saml2:AttributeValue>
  	        </saml2:Attribute>
  	      </saml2:AttributeStatement>
        </saml2:Assertion>
      </wst14:ActAs>
    </wst:RequestSecurityToken>
  </soap:Body>
</soap:Envelope>]]></programlisting>
			<para>
				As you can see from the example, the request for the
				<code>surname</code>
				and
				<code>givenname</code>
				claims, will require the provisioning of the eID identity file, the
				eID identity file signature, and the eID national registration
				signing certificate. Otherwise the eID IP-STS cannot verify the
				security properties on these eID data files, and thus cannot
				securely parse and assert the requested eID attributes.
				The following
				table
				<xref linkend="table-mapping" />
				summarizes which input attributes should be provided per requested
				claim
				type. Note that we omitted the prefixes for brevity.
			</para>
			<table id="table-mapping">
				<title>Attribute mapping</title>
				<tgroup cols="2">
					<colspec colwidth="2*" />
					<colspec colwidth="5*" />
					<thead>
						<row>
							<entry>ClaimType Uri</entry>
							<entry>Attribute Name Uri</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry>
								<code>name</code>
							</entry>
							<entry>
								<code>identity</code>
								,
								<code>identity-signature</code>
								,
								<code>nr-cert</code>
							</entry>
						</row>
						<row>
							<entry>
								<code>surname</code>
							</entry>
							<entry>
								<code>identity</code>
								,
								<code>identity-signature</code>
								,
								<code>nr-cert</code>
							</entry>
						</row>
						<row>
							<entry>
								<code>givenname</code>
							</entry>
							<entry>
								<code>identity</code>
								,
								<code>identity-signature</code>
								,
								<code>nr-cert</code>
							</entry>
						</row>
						<row>
							<entry>
								<code>x500distinguishedname</code>
							</entry>
							<entry>
								<para>Nothing.</para>
							</entry>
						</row>
						<row>
							<entry>
								<code>dateofbirth</code>
							</entry>
							<entry>
								<code>identity</code>
								,
								<code>identity-signature</code>
								,
								<code>nr-cert</code>
							</entry>
						</row>
						<row>
							<entry>
								<code>gender</code>
							</entry>
							<entry>
								<code>identity</code>
								,
								<code>identity-signature</code>
								,
								<code>nr-cert</code>
							</entry>
						</row>
						<row>
							<entry>
								<code>locality</code>
							</entry>
							<entry>
								<code>identity</code>
								,
								<code>identity-signature</code>
								,
								<code>nr-cert</code>
								,
								<code>address</code>
								,
								<code>address-signature</code>
							</entry>
						</row>
						<row>
							<entry>
								<code>postalcode</code>
							</entry>
							<entry>
								<code>identity</code>
								,
								<code>identity-signature</code>
								,
								<code>nr-cert</code>
								,
								<code>address</code>
								,
								<code>address-signature</code>
							</entry>
						</row>
						<row>
							<entry>
								<code>streetaddress</code>
							</entry>
							<entry>
								<code>identity</code>
								,
								<code>identity-signature</code>
								,
								<code>nr-cert</code>
								,
								<code>address</code>
								,
								<code>address-signature</code>
							</entry>
						</row>
						<row>
							<entry>
								<code>software-key</code>
							</entry>
							<entry>
								<code>software-key</code>
							</entry>
						</row>
						<row>
							<entry>
								<code>office-key</code>
							</entry>
							<entry>
								<code>office-key</code>
							</entry>
						</row>
					</tbody>
				</tgroup>
			</table>
		</section>
		<section>
			<title>Processing</title>
			<para>
				When the eID IP-STS receives eID data files via the additional
				<code>&lt;saml2:Assertion&gt;</code>
				within the request, is SHOULD perform
				the following additional
				processing, next to
				the processing already defined under
				<xref linkend="sts-x509-processing" />
				.
				<itemizedlist>
					<listitem>
						<para>
							Depending on the configured policy, determine whether the
							requested
							<code>&lt;wst:Claims&gt;</code>
							are permitted by the calling application
							as indicated via
							<code>&lt;wsp:AppliesTo&gt;</code>
							.
						</para>
					</listitem>
					<listitem>
						<para>
							Check whether the provided eID data files are sufficient to
							meet the requested claims.
						</para>
					</listitem>
					<listitem>
						<para>
							Validate the eID identity file signature using the received
							national registration X509 certificate.
						</para>
					</listitem>
					<listitem>
						<para>
							Perform a PKI validation against the national registration
							X509 certificate.
						</para>
					</listitem>
					<listitem>
						<para>
							Check the indicated validity period within the eID identity
							file.
						</para>
					</listitem>
					<listitem>
						<para>
							Check whether the national registration number within the
							eID identity file corresponds with the SERIALNUMBER field of the
							eID authentication certificate distinguished name.
						</para>
					</listitem>
					<listitem>
						<para>
							Parse and (depending on the claims type) transform the eID
							identity attributes towards the requested claims.
						</para>
					</listitem>
				</itemizedlist>
				Similar processing applies to the eID address file if claims related
				to this file are requested.
			</para>
		</section>
		<section>
			<title>Response</title>
			<para>
				After successful processing, the eID IP-STS responds as
				follows. Again we omitted several response elements to highlight the
				eID attribute relevant elements.
			</para>
			<programlisting language="xml"><![CDATA[<soap:Envelope>
  <soap:Header>
    ...
  </soap:Header>
  <soap:Body>
    <wst:RequestSecurityTokenResponseCollection>
      <wst:RequestSecurityTokenResponse>
        ...
        <wst:RequestedSecurityToken>
          <saml2:Assertion ID="assertionId"
            IssueInstant="2011-05-09T09:36:37.359Z" Version="2.0">
            ...
            <saml2:AttributeStatement>
              <saml2:Attribute
                Name="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname">
  	            <saml2:AttributeValue xsi:type="xs:string">
  	              Cornelis
  	            </saml2:AttributeValue>
  	          </saml2:Attribute>
  	          <saml2:Attribute
                Name="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname">
  	            <saml2:AttributeValue xsi:type="xs:string">
  	              Frank
  	            </saml2:AttributeValue>
  	          </saml2:Attribute>
            </saml2:AttributeStatement>
          </saml2:Assertion>
        </wst:RequestedSecurityToken>
      </wst:RequestSecurityTokenResponse>
    </wst:RequestSecurityTokenResponseCollection>
  </soap:Body>
</soap:Envelope>]]></programlisting>
		</section>
		<section>
			<title>Security Policy</title>
			<para>
				A relying party web service could use the following security
				policy.
			</para>
			<programlisting language="xml"><![CDATA[<wsp:Policy wsu:Id="ExampleSamlSecurityPolicy">
  <wsp:ExactlyOne>
    <wsp:All>
      <sp:TransportBinding>
        <wsp:Policy>
          <sp:TransportToken>
            <wsp:Policy>
              <sp:HttpsToken />
            </wsp:Policy>
          </sp:TransportToken>
          <sp:AlgorithmSuite>
            <wsp:Policy>
              <sp:Basic128 />
            </wsp:Policy>
          </sp:AlgorithmSuite>
          <sp:IncludeTimestamp />
        </wsp:Policy>
      </sp:TransportBinding>
      <sp:SignedSupportingTokens>
        <wsp:Policy>
          <sp:IssuedToken
            sp:IncludeToken="http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702/IncludeToken/AlwaysToRecipient">
            <sp:RequestSecurityTokenTemplate>
              <wst:TokenType>
                http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0
              </wst:TokenType>
              <wst:KeyType>
                http://docs.oasis-open.org/ws-sx/ws-trust/200512/Bearer
              </wst:KeyType>
              <wst:Claims Dialect="http://schemas.xmlsoap.org/ws/2005/05/identity">
                <wsid:ClaimType
                  Uri="http://schemas.microsoft.com/ws/2008/06/identity/claims/role" />
                ...
              </wst:Claims>
            </sp:RequestSecurityTokenTemplate>
            <wsp:Policy>
              <sp:RequireInternalReference />
            </wsp:Policy>
            <sp:Issuer>
              <wsa:Address>
                http://www.w3.org/2005/08/addressing/anonymous
              </wsa:Address>
              <wsa:Metadata>
                <wsx:Metadata>
                  <wsx:MetadataSection>
                    <wsx:MetadataReference>
                      <wsa:Address>
                        https://www.e-contract.be/iam/sts/mex
                      </wsa:Address>
                    </wsx:MetadataReference>
                  </wsx:MetadataSection>
                </wsx:Metadata>
              </wsa:Metadata>
            </sp:Issuer>
          </sp:IssuedToken>
        </wsp:Policy>
      </sp:SignedSupportingTokens>
      <wsam:Addressing wsp:Optional="false">
        <wsp:Policy />
      </wsam:Addressing>
    </wsp:All>
  </wsp:ExactlyOne>
</wsp:Policy>]]></programlisting>
			<para>
				The above security policy explicitly states the requested
				claims
				towards the eID IP-STS via the
				<code>&lt;wst:Claims&gt;</code>
				element.
			</para>
		</section>
	</section>

	<section>
		<title>Holder-of-key tokens</title>
		<para>
			Under
			<xref linkend="sts-x509" />
			we described a way to retrieve bearer tokens.
			Bearer tokens do not
			have proof keys while holder-of-key tokens do.
			A holder-of-key token
			is used to ensure that
			messages sent from subject to RP are indeed
			from the subject claiming
			to have sent them. This protocol-level
			protection guards against man
			in the middle attacks.
			Depending on the
			relying party's web service policy some relying parties might require
			holder-of-key tokens.
		</para>
		<section>
			<title>STS Request</title>
			<para>
				In this section we describe how the eID IP-STS can issue
				holder-of-key tokens where the proof-of-possession key is an RSA
				key.
				For a relying party to request a
				holder-of-key token it should
				extend
				the
				<xref linkend="sts-x509-request" />
				message under
				<code>&lt;wst:RequestSecurityToken&gt;</code>
				as follows:
			</para>
			<programlisting language="xml"><![CDATA[<wst:KeyType>
  http://docs.oasis-open.org/ws-sx/ws-trust/200512/PublicKey
</wst:KeyType>
<wst:UseKey>
  <ds:KeyInfo xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
    <ds:KeyValue>
      <ds:RSAKeyValue>
        <ds:Modulus>
          ...
        </ds:Modulus>
        <ds:Exponent>AQAB</ds:Exponent>
      </ds:RSAKeyValue>
    </ds:KeyValue>
  </ds:KeyInfo>
</wst:UseKey>]]></programlisting>
			<para>
				Here the
				<code>&lt;wst:UseKey&gt;</code>
				contains the RSA key to be used as proof-of-possession key in
				combination
				with the holder-of-key token issued by the eID IP-STS.
			</para>
		</section>
		<section>
			<title>STS Response</title>
			<para>
				When the eID IP-STS receives a request to issue a holder-of-key
				token,
				it will put the following
				<code>&lt;saml2:SubjectConfirmation&gt;</code>
				within
				the returned
				<code>&lt;saml2:Assertion&gt;</code>
				.
			</para>
			<programlisting language="xml"><![CDATA[<saml2:SubjectConfirmation
  Method="urn:oasis:names:tc:SAML:2.0:cm:holder-of-key">
  <saml2:SubjectConfirmationData xsi:type="saml2:KeyInfoConfirmationDataType">
    <ds:KeyInfo>
      <ds:KeyValue>
        <ds:RSAKeyValue>
          <ds:Modulus>
            ...
          </ds:Modulus>
          <ds:Exponent>AQAB</ds:Exponent>
        </ds:RSAKeyValue>
      </ds:KeyValue>
    </ds:KeyInfo>
  </saml2:SubjectConfirmationData>
</saml2:SubjectConfirmation>]]></programlisting>
			<para>
				By using such holder-of-key token we basically switch
				from
				the
				X509 certificate trust model to a SAML based trust model.
				Important
				to note here that the client keeps using the proof-of-possession
				key
				towards relying parties when presenting the
				corresponding SAML
				holder-of-key token.
				The advantage of this
				mechanism is that the
				relying party no longer needs to perform a full
				PKI validation of the
				eID authentication certificate chain.
				The
				relying party can simply
				trust the eID IP-STS to already have
				executed the relevant PKI
				verifications as part of the token issuing.
			</para>
		</section>
		<section>
			<title>Usage</title>
			<para>
				The holder-of-key SAML token is used as described under
				<xref linkend="section-saml-token" />
				except that we also include an XML signature as part of the
				WS-Security header. This XML signature refers to the SAML token
				within
				its
				<code>&lt;ds:KeyInfo&gt;</code>
				as follows.
			</para>
			<programlisting language="xml"><![CDATA[<soap:Envelope>
  <soap:Header>
    ...
    <wsa:To wsu:Id="To">https://www.e-contract.be/iam/example</To>
    <wsse:Security soap:mustUnderstand="true">
      <wsu:Timestamp wsu:Id="TS">
        <wsu:Created>2014-12-10T15:39:35.779Z</wsu:Created>
        <wsu:Expires>2014-12-10T15:44:35.779Z</wsu:Expires>
      </wsu:Timestamp>
      <saml2:Assertion ID="SAML-ID" 
        IssueInstant="2014-12-10T15:39:34.738Z" 
        Version="2.0">
        ...
      </saml2:Assertion>
      <ds:Signature>
        <ds:SignedInfo>
          <ds:CanonicalizationMethod
            Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#">
            <ec:InclusiveNamespaces PrefixList="soap"/>
          </ds:CanonicalizationMethod>
          <ds:SignatureMethod
            Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
          <ds:Reference URI="#TS">
            <ds:Transforms>
              <ds:Transform
                Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#">
                <ec:InclusiveNamespaces PrefixList="wsse soap"/>
              </ds:Transform>
            </ds:Transforms>
            <ds:DigestMethod
              Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
            <ds:DigestValue>...</ds:DigestValue>
          </ds:Reference>
          <ds:Reference URI="#To">
            <ds:Transforms>
              <ds:Transform
                Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#">
                <ec:InclusiveNamespaces PrefixList="soap"/>
              </ds:Transform>
            </ds:Transforms>
            <ds:DigestMethod
              Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
            <ds:DigestValue>...</ds:DigestValue>
          </ds:Reference>
        </ds:SignedInfo>
        <ds:SignatureValue>...</ds:SignatureValue>
        <ds:KeyInfo>
          <wsse:SecurityTokenReference
            wsse11:TokenType="http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0">
            <wsse:KeyIdentifier
              ValueType="http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLID">
              SAML-ID
            </wsse:KeyIdentifier>
          </wsse:SecurityTokenReference>
        </ds:KeyInfo>
      </ds:Signature>
    </wsse:Security>
  </soap:Header>
  <soap:Body>
    ...
  </soap:Body>
</soap:Envelope>]]></programlisting>
			<para>
				To prevent certain attacks, the holder-of-key token should sign both
				the
				<code>&lt;wsu:Timestamp&gt;</code>
				element and the
				<code>&lt;wsa:To&gt;</code>
				element.
			</para>
		</section>
		<section>
			<title>Security Policy</title>
			<para>
				A web service can use the following WS-SecurityPolicy to
				express the required usage of holder-of-key tokens.
			</para>
			<programlisting language="xml"><![CDATA[<wsp:Policy wsu:Id="HolderOfKeyPolicy">
  <wsp:ExactlyOne>
    <wsp:All>
      <sp:TransportBinding>
        <wsp:Policy>
          <sp:TransportToken>
            <wsp:Policy>
              <sp:HttpsToken>
                <wsp:Policy/>
              </sp:HttpsToken>
            </wsp:Policy>
          </sp:TransportToken>
          <sp:AlgorithmSuite>
            <wsp:Policy>
              <sp:Basic128/>
            </wsp:Policy>
          </sp:AlgorithmSuite>
          <sp:IncludeTimestamp/>
        </wsp:Policy>
      </sp:TransportBinding>
      <sp:SignedEndorsingSupportingTokens>
        <wsp:Policy>
          <sp:IssuedToken
            sp:IncludeToken="http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702/IncludeToken/AlwaysToRecipient">
            <sp:RequestSecurityTokenTemplate>
              <wst:TokenType>
  http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0
			  </wst:TokenType>
              <wst:KeyType>
                http://docs.oasis-open.org/ws-sx/ws-trust/200512/PublicKey
			  </wst:KeyType>
            </sp:RequestSecurityTokenTemplate>
            <wsp:Policy>
              <sp:RequireInternalReference/>
            </wsp:Policy>
            <sp:Issuer>
              <wsa:Address>
                http://www.w3.org/2005/08/addressing/anonymous
              </wsa:Address>
              <wsa:Metadata>
                <wsx:Metadata>
                  <wsx:MetadataSection>
                    <wsx:MetadataReference>
                      <wsa:Address>
                        https://www.e-contract.be/iam/sts/mex
					  </wsa:Address>
                    </wsx:MetadataReference>
                  </wsx:MetadataSection>
                </wsx:Metadata>
              </wsa:Metadata>
            </sp:Issuer>
          </sp:IssuedToken>
          <sp:SignedParts>
            <sp:Header Name="To"
              Namespace="http://www.w3.org/2005/08/addressing" />
          </sp:SignedParts>
        </wsp:Policy>
      </sp:SignedEndorsingSupportingTokens>
      <wsam:Addressing wsp:Optional="false">
        <wsp:Policy/>
      </wsam:Addressing>
    </wsp:All>
  </wsp:ExactlyOne>
</wsp:Policy>]]></programlisting>
			<para>
				Note here the usage of
				<code>&lt;sp:SignedEndorsingSupportingToken&gt;</code>
				.
				<code>Signed</code>
				because of the used SSL
				<code>TransportBinding</code>
				signs the supporting token
				.
				<code>Endorsing</code>
				because the holder-of-key token adds a required proof-of-possession
				signature and thus endorses part of the message.
			</para>
		</section>
	</section>

	<appendix>
		<title>eID Security Token Service Specifications License
		</title>
		<para>
			<mediaobject>
				<imageobject>
					<imagedata format="PNG" fileref="cc-30-by-nc-nd.png"
						scale="100" />
				</imageobject>
			</mediaobject>
			This document has been released under the
			<ulink url="http://creativecommons.org/licenses/by-nc-nd/3.0/">Creative Commons 3.0</ulink>
			license.
		</para>
	</appendix>

	<appendix>
		<title>eID Security Token Service Project License</title>
		<para>
			The eID Security Token Service Project source code has
			been
			released under the GNU LGPL version 3.0.
		</para>
		<para>
			<code>
				This is free software; you can redistribute it and/or modify it
				under the terms of the GNU Lesser General Public License version 3.0
				as published by the Free Software Foundation.
			</code>
		</para>
		<para>
			<code>
				This software is distributed in the hope that it will be
				useful, but WITHOUT ANY WARRANTY; without even the implied warranty
				of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
				Lesser General Public License for more details.
			</code>
		</para>
		<para>
			<code>
				You should have received a copy of the GNU Lesser General
				Public License along with this software; if not, see
				http://www.gnu.org/licenses/.
			</code>
		</para>
	</appendix>

</article>
